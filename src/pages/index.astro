---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { getCollection } from "astro:content";
import ArtCard from "../components/ArtCard.astro";
import BlogCard from "../components/BlogCard.astro";
import RecomendsCard from "../components/RecomendsCard.astro";
import { shuffle } from "../utils";
import { ClientRouter } from "astro:transitions";

const blog = (await getCollection("blog")).sort(
  (a: any, b: any) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
const art = await getCollection("art");
const recomends = await getCollection("recomends");

let content = [...blog, ...art, ...recomends];
shuffle(content);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  <ClientRouter />
  <script  >
      import Masonry from "masonry-layout";
      import imagesLoaded from "imagesloaded";

      document.addEventListener("DOMContentLoaded", () => {
        const grid = document.querySelector(".grid");
        if (!grid) return;

        // initialize Masonry
        const msnry = new Masonry(grid, {
          itemSelector: ".grid-item",
          gutter: 40,
          transitionDuration: '0s',
          fitWidth: true,
        });
        let imgLoaded = imagesLoaded(grid);
        imgLoaded.on("done", () => {
          grid.classList.remove("is-loading");
          grid.classList.add("is-ready");
          msnry.layout!();
        });
      });
    </script>
  </head>
  <body>
    
    <Header />
    <main class="dotted">
      <div class="grid container is-loading" >
        {
          content.map((post) => {
            switch (post.data.type) {
              case "art":
                return (
                  <div class="grid-item">
                    {" "}
                    <ArtCard  {...post.data} />
                  </div>
                );

              case "blog":
                return (
                  <div class="grid-item ">
                    <BlogCard {...post.data} />
                  </div>
                );
              case "recomends":
                return (
                  <div class="grid-item">
                    {" "}
                    <RecomendsCard {...post.data} />
                  </div>
                );
            }
          })
        }
      </div>
    </main>
    <Footer />
      
  </body><style>

    li {
      list-style: none;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
    }
    .grid {
      margin: 0 auto;
    }
    .grid-item {
      margin-bottom: 40px;
    }
    a {
      text-decoration: none;
    }
    ul {
      padding: 0;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 52px;
    }

    .title {
      font-size: 24px;
      font-weight: 400;
      margin-top: 15px;
      line-height: 36px;
    }
    .description {
      font-weight: 400;
      line-height: 21px;
      font-size: 0.8em;
      margin-top: 15px;
      color: #1e1e1e;
    }
    .container {
    }
    .img-container {
      background-color: #f4f4f4;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 24px;
      border-radius: 24px;

    }
    img {
      width: 320px;
    }
    .grid.is-loading {
      visibility: hidden;
      opacity: 0;
      transition: opacity 0.5s ease;
    }
    .grid.is-ready {
      visibility: visible;
      opacity: 1;
      transition: opacity 0.5s ease;
    }
    @media (max-width: 800px) {
      
      ul {
        grid-template-columns: 1fr;
      }
    }
  </style>
</html>
